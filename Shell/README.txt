This program creates a shell that is similar to the command line/terminal on most systems. It has built-in commands cd, clr, dir, echo, environ, help, pause, and quit. It also has the capability of running external commands like ls, cat, and wc. Output redirection is capable in this shell using > to truncate and >> to append. If the file does not exist, it creates the file with the given name. All external commands have output redirection capabilities, while only a few built-in commands have output redirection (dir, echo, environ, help). The shell also features input redirection using <. Input redirection is only a feature for external commands.

To test my program I would create a function and test its functionality separately before trying to integrate it into my program. I started creating built-in commands first as those were less complicated and easy to debug. Then I built the external command functionality and tested that as I went along. Next input/output redirection was added and tested that it worked as desired before continuing. The idea was to make sure the foundation was sound before continuing to build more advanced functionality to the shell.

I got a better understanding of how processes work. I now understand how the fork(), execpv(), and dup2() functions work as I had to implement them to make my external commands work. I also improved in my coding skills as this project required me to solve some problems I have not encountered before and use some features I have not used before (like forking and redirection of output).